var Suit = (function (exports,$) {
  'use strict';

  $ = $ && $.hasOwnProperty('default') ? $['default'] : $;

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function getPadding($tr) {
      return parseInt($tr.find('th:first').css('padding-left'));
  }

  function findWithChildren($tr) {
      var padding = getPadding($tr);
      return $tr.nextUntil(function () {
          return getPadding($(this)) <= padding;
      }).andSelf();
  }

  var Suit = function () {
      function Suit() {
          classCallCheck(this, Suit);
      }

      createClass(Suit, [{
          key: 'after_inline',

          // Register callbacks to perform after inline has been added
          value: function after_inline() {
              var functions = {};
              var register = function register(fn_name, fn_callback) {
                  functions[fn_name] = fn_callback;
              };

              var run = function run(inline_prefix, row) {
                  for (var fn_name in functions) {
                      functions[fn_name](inline_prefix, row);
                  }
              };

              return {
                  register: register,
                  run: run
              };
          }
      }, {
          key: 'ListActionsToggle',
          value: function ListActionsToggle() {
              var $topActions = void 0;

              var init = function init() {
                  $(document).ready(function () {
                      $topActions = $('.results').parent().find('.actions').eq(0);
                      if (!$topActions.length) return;

                      $("tr input.action-select, #action-toggle").on('click', checkIfSelected);
                  });
              };

              var checkIfSelected = function checkIfSelected() {
                  if ($('tr.selected').length) {
                      $topActions.slideDown('fast');
                  } else {
                      $topActions.slideUp('fast');
                  }
              };

              return {
                  init: init
              };
          }
      }, {
          key: 'FixedBar',
          value: function FixedBar() {
              var $fixedItem = void 0;
              var $fixedItemParent = void 0;
              var $win = void 0;
              var itemOffset = void 0;
              var extraOffset = 0;
              var fixed = false;

              function init(selector) {
                  $fixedItem = $(selector || '.submit-row');
                  if (!$fixedItem.length) return;

                  $fixedItemParent = $fixedItem.parents('form');
                  itemOffset = $fixedItem.offset();
                  $win = $(window);
                  window.onscroll = onScroll;
                  window.onresize = onScroll;
                  onScroll();

                  setInterval(function () {
                  }, 200);
              }

              function onScroll() {

                  var itemHeight = $fixedItem.height();
                  var scrollTop = $win.scrollTop();

                  if (scrollTop + $win.height() - itemHeight - extraOffset < itemOffset.top) {
                      if (!fixed) {
                          $fixedItem.addClass('fixed');
                          $fixedItemParent.addClass('fixed').css('padding-bottom', itemHeight + 'px');
                          fixed = true;
                      }
                  } else {
                      if (fixed) {
                          $fixedItem.removeClass('fixed');
                          $fixedItemParent.removeClass('fixed').css('padding-bottom', '');
                          fixed = false;
                      }
                  }
              }

              return {
                  init: init
              };
          }
      }]);
      return Suit;
  }();

  var suit = new Suit();
  window.Suit = Suit;

  /**
   * Avoids double-submit issues in the change_form.
   */
  $.fn.suitFormDebounce = function () {
      var $form = $(this);
      var $saveButtons = $form.find('.submit-row button, .submit-row input[type=button], .submit-row input[type=submit]');
      var submitting = false;

      $form.submit(function () {
          if (submitting) {
              return false;
          }

          submitting = true;
          $saveButtons.addClass('disabled');

          setTimeout(function () {
              $saveButtons.removeClass('disabled');
              submitting = false;
          }, 5000);
      });
  };

  /**
   * Content tabs
   */
  $.fn.suitFormTabs = function () {

      var $tabs = $(this);
      var tabPrefix = $tabs.data('tab-prefix');
      if (!tabPrefix) return;

      var $tabLinks = $tabs.find('a');

      function tabContents($link) {
          return $('.' + tabPrefix + '-' + $link.attr('href').replace('#', ''));
      }

      function activateTabs() {
          // Init tab by error, by url hash or init first tab
          if (window.location.hash) {
              var foundError = void 0;
              $tabLinks.each(function () {
                  var $link = $(this);
                  if (tabContents($link).find('.error, .errorlist').length !== 0) {
                      $link.addClass('has-error');
                      $link.trigger('click');
                      foundError = true;
                  }
              });
              !foundError && $($tabs).find('a[href=\\' + window.location.hash + ']').click();
          } else {
              $tabLinks.first().trigger('click');
          }
      }

      $tabLinks.click(function () {
          var $link = $(this);

          var showEvent = $.Event('shown.suit.tab', {
              relatedTarget: $link,
              tab: $link.attr('href').replace('#', '')
          });

          $link.parent().parent().find('.active').removeClass('active');
          $link.addClass('active');
          $('.' + tabPrefix).removeClass('show').addClass('hidden-xs-up');
          tabContents($link).removeClass('hidden-xs-up').addClass('show');
          $link.trigger(showEvent);
      });

      activateTabs();
  };

  /* Characters count for CharacterCountTextarea */
  $.fn.suitCharactersCount = function () {
      var $elements = $(this);

      if (!$elements.length) return;

      $elements.each(function () {
          var $el = $(this);
          var $countEl = $('<div class="suit-char-count"></div>');
          $el.after($countEl);
          $el.on('keyup', function (e) {
              updateCount($(e.currentTarget));
          });
          updateCount($el);
      });

      function updateCount($el) {
          var maxCount = $el.data('suit-maxcount');
          var twitterCount = $el.data('suit-twitter-count');
          var value = $el.val();
          var len = twitterCount ? getTweetLength(value) : value.length;
          var count = maxCount ? maxCount - len : len;
          if (count < 0) count = '<span class="text-danger">' + count + '</span>';

          $el.next().first().html(count);
      }

      function getTweetLength(input) {
          var tmp = "";
          for (var i = 0; i < 23; i++) {
              tmp += "o";
          }
          return input.replace(/(http:\/\/[\S]*)/g, tmp).length;
      }
  };

  /**
   * Search filters - submit only changed fields
   */
  $.fn.suitSearchFilters = function () {
      $(this).change(function () {
          var $field = $(this);
          var $option = $field.find('option:selected');
          var select_name = $option.data('name');
          if (select_name) {
              $field.attr('name', select_name);
          } else {
              $field.removeAttr('name');
          }
          // Handle additional values for date filters
          var additional = $option.data('additional');
          console.log($field, additional);
          if (additional) {
              var hiddenId = $field.data('name') + '_add';
              var $hidden = $('#' + hiddenId);
              if (!$hidden.length) {
                  $hidden = $('<input/>').attr('type', 'hidden').attr('id', hiddenId);
                  $field.after($hidden);
              }
              additional = additional.split('=');
              $hidden.attr('name', additional[0]).val(additional[1]);
          }
      });
      $(this).trigger('change');
  };

  $.fn.suit_list_sortable = function () {
      var $inputs = $(this);
      if (!$inputs.length) return;

      // Detect if this is normal or mptt table
      var mptt_table = $inputs.first().closest('table').hasClass('table-mptt');

      function performMove($arrow, $row) {
          var $next = void 0;
          var $prev = void 0;

          $row.closest('table').find('tr.selected').removeClass('selected');
          if (mptt_table) {
              var padding = getPadding($row);
              var $rows_to_move = findWithChildren($row);
              if ($arrow.data('dir') === 'down') {
                  $next = $rows_to_move.last().next();
                  if ($next.length && getPadding($next) === padding) {
                      var $after = findWithChildren($next).last();
                      if ($after.length) {
                          $rows_to_move.insertAfter($after).addClass('selected');
                      }
                  }
              } else {
                  $prev = $row.prevUntil(function () {
                      return getPadding($(this)) <= padding;
                  }).andSelf().first().prev();
                  if ($prev.length && getPadding($prev) === padding) {
                      $rows_to_move.insertBefore($prev).addClass('selected');
                  }
              }
          } else {
              if ($arrow.data('dir') === 'down') {
                  $next = $row.next();
                  if ($next.is(':visible') && $next.length) {
                      $row.insertAfter($next).addClass('selected');
                  }
              } else {
                  $prev = $row.prev();
                  if ($prev.is(':visible') && $prev.length) {
                      $row.insertBefore($prev).addClass('selected');
                  }
              }
          }
          markLastInline($row.parent());
      }

      function onArrowClick(e) {
          var $sortable = $(this);
          var $row = $sortable.closest($sortable.hasClass('sortable-stacked') ? 'div.inline-related' : 'tr');
          performMove($sortable, $row);
          e.preventDefault();
      }

      function createLink(text, direction, on_click_func, is_stacked) {
          return $('<a/>').attr('href', '#').addClass('sortable sortable-' + direction + (is_stacked ? ' sortable-stacked' : '')).attr('data-dir', direction).html(text).on('click', on_click_func);
      }

      function markLastInline($rowParent) {
          $rowParent.find(' > .last-sortable').removeClass('last-sortable');
          $rowParent.find('tr.form-row:visible:last').addClass('last-sortable');
      }

      var $lastSortable = void 0;
      $inputs.each(function () {
          var $inline_sortable = $('<div class="inline-sortable"/>');
          var icon = '<span class="fa fa-lg fa-arrow-up"></span>';
          var $sortable = $(this);
          var is_stacked = $sortable.hasClass('suit-sortable-stacked');
          var $up_link = createLink(icon, 'up', onArrowClick, is_stacked);
          var $down_link = createLink(icon.replace('-up', '-down'), 'down', onArrowClick, is_stacked);

          if (is_stacked) {
              var $sortable_row = $sortable.closest('div.form-group');
              var $stacked_block = $sortable.closest('div.inline-related');
              var $links_span = $('<span/>').attr('class', 'stacked-inline-sortable');

              // Add arrows to header h3, move order input and remove order field row
              $links_span.append($up_link).append($down_link);
              $links_span.insertAfter($stacked_block.find('.inline_label'));
              $stacked_block.append($sortable);
              $sortable_row.remove();
          } else {
              $sortable.parent().append($inline_sortable);
              $inline_sortable.append($up_link);
              $inline_sortable.append($down_link);
              $lastSortable = $sortable;
          }
      });

      $lastSortable && markLastInline($lastSortable.closest('.form-row').parent());

      // Filters out unchanged checkboxes, selects and sortable field itself
      function filter_unchanged(i, input) {
          if (input.type === 'checkbox') {
              if (input.defaultChecked === input.checked) {
                  return false;
              }
          } else if (input.type === 'select-one' || input.type === 'select-multiple') {
              var options = input.options;
              var option = void 0;
              for (var j = 0; j < options.length; j++) {
                  option = options[j];
                  if (option.selected && option.selected === option.defaultSelected) {
                      return false;
                  }
              }
          } else if ($(input).hasClass('suit-sortable')) {
              if (input.defaultValue === input.value && input.value === 0) {
                  return false;
              }
          }
          return true;
      }

      // Update input count right before submit
      if ($inputs && $inputs.length) {
          var $last_input = $inputs.last();
          var selector = $(this).selector;
          $($last_input[0].form).submit(function (e) {
              var i = 0;
              var value = void 0;
              // e.preventDefault();
              $(selector).each(function () {
                  var $input = $(this);
                  var fieldset_id = $input.attr('name').split(/-\d+-/)[0];
                  // Check if any of new dynamic block values has been added
                  var $set_block = $input.closest('.dynamic-' + fieldset_id);
                  var $changed_fields = $set_block.find(":input[type!='hidden']:not(.suit-sortable)").filter(function () {
                      return $(this).val() !== "";
                  }).filter(filter_unchanged);
                  // console.log($changed_fields.length, $changed_fields);
                  var is_changelist = !$set_block.length;
                  if (is_changelist || $set_block.hasClass('has_original') || $changed_fields.serializeArray().length
                  // Since jQuery serialize() doesn't include type=file do additional check
                  || $changed_fields.find(":input[type='file']").addBack().length) {
                      value = i++;
                      $input.val(value);
                  }
              });
          });
      }

      suit.after_inline.register('bind_sortable_arrows', function (prefix, row) {
          $(row).find('.suit-sortable').on('click', onArrowClick);
          markLastInline($(row).parent());
      });
  };

  $('.suit-sortable').suit_list_sortable();

  $(document).on('formset:added', function (e, row, prefix) {
      suit.after_inline.run(prefix, row);
  });

  exports.Suit = Suit;

  return exports;

}({},django.jQuery));
//# sourceMappingURL=suit.min.js.map